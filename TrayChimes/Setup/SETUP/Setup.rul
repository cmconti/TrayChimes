/*----------------------------------------------------------------------------*\
 *
 *  IIIIIII SSSSSS
 *    II    SS                          InstallShield (R)
 *    II    SSSSSS          (c) 1990-1996, Stirling Technologies, Inc.
 *    II        SS                     All Rights Reserved.
 *  IIIIIII SSSSSS
 *
 *
 *  This source code is intended as a supplement to InstallShield Corporation
 *  product documentation.  Refer to your InstallShield Corporation
 *  product documentation for more detailed information.
 *
 *
 *    File Name:  SETUP.RUL
 *
 *  Description:  InstallShield SDK Edition Template One script.
 *
 *
 *
 *
 *       Author:  InstallShield Corporation       Date:  1-10-96
 *
 *     Comments:  This template script performs a basic installation to a
 *                Windows 95 or Windows NT platform.  The installation
 *                includes components: Application Program Files, Sample and
 *                Template Files, Online Help Files, and Multimedia Tutorial
 *                Files.  With minor modifications, this template can be
 *                adapted to create new, customized installations.
 *
 *                There maybe small differences between this script and the
 *                script shown in the on-line User's Guide
 *
 *
\*----------------------------------------------------------------------------*/



// Size of components.
#define SIZE_REQ_PROGRAM        250000

#define APP_NAME                "TrayChimes"
#define PROGRAM_GROUP_NAME      "Startup"
#define APPBASE_PATH            "PretzelSoft\\TrayChimes\\"
#define COMPANY_NAME            "PretzelSoft"
#define PRODUCT_NAME            "TrayChimes"
#define PRODUCT_VERSION         "1.22"
#define PRODUCT_KEY             "TrayChimes.exe"
#define UNINSTALL_KEY           "TrayChimes"
#define APPBASE_DIR95           "Program Files"
#define BASE_REGISTRY95         "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\"

#define STR_COMPLETE95 "by selecting the program icon in the Startup menu.\n\n"

declare

        // Global variable declarations.
        STRING  svGrp, szMsg, szFileSet, szTitle, szAppPath, szAppSharedDir;
        STRING  szProgram, szTemp, svUninstLogFile, szRegKey;
        STRING  svMainDirectory[ _MAX_STRING ];
        BOOL    bSpaceOk, bReshowSetupType;
        NUMBER  nResult, nStatusId, nType;

        // Function declarations.
        prototype SetupScreen();
        prototype CheckRequirements();
        prototype CheckSpaceRequirements( number, number, number, string );
        prototype CreateRegDBEntries();

program

StartHere:
        Disable( BACKGROUND );

        // Set up the installation screen.
        SetupScreen();

        // Set installation info., which is required for registry entries.
        InstallationInfo( COMPANY_NAME, PRODUCT_NAME, PRODUCT_VERSION, PRODUCT_KEY );

// Create a Welcome dialog.
WelcomeDlg:
        Disable( BACKBUTTON );
        Welcome( "", 0 );
        Enable( BACKBUTTON );

        // Test target system proper configuration.
        CheckRequirements();

        // Ask user for a destination location for the installation.
GetTargetDirectory:

        svMainDirectory = TARGETDISK ^ APPBASE_DIR95 ^ APPBASE_PATH;

        szMsg = "";
        if ( AskDestPath( "", szMsg, svMainDirectory, 0 ) = BACK ) then
           goto WelcomeDlg;
        endif;

        szAppSharedDir = svMainDirectory ^ "System";

        nType = TYPICAL;


FileTransferSetup:

        // Prepare InstallShield to record deinstallation information.
        DeinstallStart( svMainDirectory, svUninstLogFile, UNINSTALL_KEY, 0 );
        RegDBSetItem( REGDB_UNINSTALL_NAME, APP_NAME );


        // Define the "General" file set.
        szFileSet = "General";
        TARGETDIR = svMainDirectory;

        FileSetBeginDefine( szFileSet );

          SetStatusWindow( -1, "Copying program files..." );

          // Always copy README & related files, located at
          // the root level in the DATA.Z library file.
          CompressGet( "data.z", "*.*", COMP_NORMAL );

        FileSetEndDefine( szFileSet );

DoFileTransfer:
        // Set up progress indicator and information gauge.
        Enable( STATUSDLG );
        StatusUpdate( ON, 100 );

        // Perform the file set.
        nResult = FileSetPerformEz( szFileSet, 0 );

        switch (nResult)

        case FS_DONE: // Successful completion.

        case FS_CREATEDIR: // Create directory error.
             MessageBox( "Unable to create a directory under " + TARGETDIR + "."+
                         "Please check write access to this directory.", SEVERE );
             abort;

        default: // Group all other errors under default label.
             NumToStr( szTemp, nResult );
             MessageBox( "General file transfer error."+
                          "Please check your target location and try again."+
                          "\n\n Error Number:"+szTemp, SEVERE );

             abort;
        endswitch;

SetRegistryEntries:

        CreateRegDBEntries( );

        Delay(2);
        Disable( STATUSDLG );

        // Create program groups (folders) and icons.

CreateFolderIcons:
        TARGETDIR = svMainDirectory;

        szProgram = TARGETDIR ^ "TrayChimes.exe";
        LongPathToQuote( szProgram, TRUE );
        AddFolderIcon( PROGRAM_GROUP_NAME, APP_NAME, szProgram,
                          TARGETDIR,
                          "", 0, "", REPLACE );
        Delay( 1 );

        // Announce setup complete and offer to read README file.

        SetStatusWindow( 100, "Installation complete." );

        // If shared files could not be installed, then users must restart system.
        if (BATCH_INSTALL = TRUE) then
           szMsg = "Some files could not be installed because they are "+
                   "currently in use by other programs in the system.  "+
                   "To allow for proper operation of the new program you should restart"+
                   "your system at this time.";
           CommitSharedFiles(0);
           RebootDialog( "Restart Windows", szMsg, SYS_BOOTMACHINE );
        else

           szMsg = "Setup is complete.  You may start the installed program ";
           szMsg = szMsg + STR_COMPLETE95;
           szMsg = szMsg + APP_NAME + " will also be started automatically when ";
           szMsg = szMsg + "you restart windows or log in again";

           MessageBeep( 0 );
           MessageBox( szMsg, INFORMATION );
        endif;

        exit;


/*---------------------------------------------------------------------------*\
 *
 * Function:  SetupScreen
 *
 *  Purpose:  This function will set up the screen look.  This includes
 *            colors, fonts, text to be displayed, etc.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function SetupScreen()
        begin

          Enable( INDVFILESTATUS );

          SetTitle( APP_NAME + " Setup", 28, WHITE );

          SetTitle( "Setup", 0, BACKGROUNDCAPTION ); // Caption bar text.

          Enable( BACKGROUND );

        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckRequirements
 *
 *  Purpose:  This function will check all minimum requirements for the
 *            application being installed.  If any fail, then the user
 *            is informed and the installation is terminated.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckRequirements()
          number  nvDx, nvDy;
          number nvResult;
          STRING szResult;
        begin

          // Determine if target system uses NT or Windows 95.
          GetSystemInfo( WINMAJOR, nvResult, szResult );

          if (nvResult < 4) then
             MessageBox( "TrayChimes requires Windows95 or \n"+
                          "Windows NT 4.0", SEVERE );

             abort;
          endif;


          // Check screen resolution.
          GetExtents( nvDx, nvDy );
          if (nvDy < 480) then
             MessageBox( "This program requires VGA or better resolution.", WARNING );
             exit;
          endif;

        end;

/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckSpaceRequirements
 *
 *  Purpose:  This function will check space requirements based on the
 *            elements being installed.
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckSpaceRequirements( bIncludeSamples,
                                 bIncludeProgram,
                                 bIncludeHelp,
                                 szDir )
          number  nSizeRequired;
        begin

          // Determine total size.
          nSizeRequired = SIZE_REQ_PROGRAM;

          // Check space on target drive.
          bSpaceOk = TRUE;
          if (GetDiskSpace( szDir ) < nSizeRequired) then
             szMsg = "There is not enough space available on the disk\n" +
                     "'" + svMainDirectory + "' \n" +
                     "Please free up some space or change the target location\n" +
                     "to a different disk";
             MessageBeep(0);
             MessageBox( szMsg, WARNING );
             bSpaceOk = FALSE;
          endif;

          return bSpaceOk;
        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CreateRegDBEntries
 *
 *  Purpose:  This function will create necessary keys and values for
 *            the sample program.
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CreateRegDBEntries()
        string szKey[255], szValue, szDemo, szProgram;
begin

        RegDBSetDefaultRoot( HKEY_CURRENT_USER );

        // Create PRODUCT_KEY key.
        szKey = "SOFTWARE\\" + COMPANY_NAME + "\\" + PRODUCT_NAME;
        RegDBCreateKeyEx( szKey, "" );

        // Create "ChimeSelection" key.
        szKey = "SOFTWARE\\" + COMPANY_NAME + "\\" + PRODUCT_NAME + "\\" +
                "ChimeSelection";
        RegDBCreateKeyEx( szKey, "" );

        // Create "ChimeSounds" key.
        szKey = "SOFTWARE\\" + COMPANY_NAME + "\\" + PRODUCT_NAME + "\\" +
                "ChimeSounds";
        RegDBCreateKeyEx( szKey, "" );

end;

